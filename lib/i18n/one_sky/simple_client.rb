module I18n
  module OneSky
    # This class is the bridge between the OneSky service and the I18n Simple backend.
    # It takes the phrases defined in I18n's default locale and uploads them to OneSky for translation.
    # Then it downloads available translations and saves them as Simple backend's YAML files.
    # A regular workflow would then look like:
    #   initialize -> load_phrases -> upload_phrases -> download_translations
    class SimpleClient
      include I18n::Backend::Flatten

      # The base OneSky project. Gives you low-level access to the API gem.
      attr_reader :client, :project, :platform

      # Load the client from the one_sky.yml file (installed by `rails generate one_sky:init_generator`)
      def self.from_config()
        self.new(load_config)
      end

      def self.config_path
        File.join(Rails.root.to_s, 'config', 'one_sky.yml')
      end

      # Load the one_sky.yml file.
      # first parsing it as ERB
      # to enable dynamic config;
      #
      #   api_key:     <%= ENV["ONESKY_API_KEY"] %>
      #   api_secret:  <%= ENV["ONESKY_API_SECRET"] %>
      #   project:     <%= ENV["ONESKY_PROJECT"] %>
      #   platform_id: <%= ENV["ONESKY_PLATFORM_ID"] %>
      #
      def self.load_config
        require 'erb'
        YAML::load(ERB.new(File.read(self.config_path)).result).symbolize_keys
      end

      # Are we in Rails, and does the config file exist?
      def self.has_config?
        defined?(Rails) && File.exist?(self.config_path)
      end

      # When you initialize a client inside a Rails project, it will take the OneSky configuration variables supplied when you called rails generate one_sky:init.
      # Outside of Rails, credentials are expected to come from environment variables: ONESKY_API_KEY, ONESKY_API_SECRET, ONESKY_PROJECT.
      # You can override these defaults by providing a hash of options:
      # * api_key
      # * api_secret
      # * project
      def initialize(options = {})
        @client   = ::OneSky::Client.new(options[:api_key], options[:api_secret])
        @project  = @client.project(options[:project])
        @platform = @project.platform(options[:platform_id])
      end

      # Check the configuration of our client.
      def verify!
        verify_platform!
        verify_default_locale!
      end

      # The default locale for the platform.
      def platform_base_locale
        platform_details["base_locale"]
      end

      # An array of codes. eg. ["en_US", "zh_CN"]
      def platform_locale_codes
        platform_locales.map do |hash|
          hash["locale"]
        end
      end

      # Cached call to load the locales for a platform.
      def platform_locales
        @platform_locales ||= @platform.locales
      end

      # Cached call to load the details for the platform.
      def platform_details
        @platform_details ||= @platform.details
      end

      def all_translations
        platform_locale_codes.inject({}) do |hash, locale|
          hash.merge(translations_for(locale))
        end
      end

      def translations_for(locale)
        YAML.load(platform.translation.download_yaml(locale))
      end

      def download_translations_yaml(yaml_path)
        platform_locales.each do |locale|
          locale_code  = locale["locale"]
          local_name   = locale["name"]["local"]
          english_name = locale["name"]["eng"]

          yaml = platform.translation.download_yaml(locale_code)

          File.open(File.join(yaml_path, "#{locale_code}_one_sky.yml"), "w") do |f|
            f.puts "# PLEASE DO NOT EDIT THIS FILE."
            f.puts "# This was downloaded from OneSky. Log in to your OneSky account to manage translations on their website."
            f.puts "# Language code: #{locale_code}"
            f.puts "# Language name: #{local_name}"
            f.puts "# Language English name: #{english_name}"
            f.write yaml
          end
        end
      end

      def download_translations_active_record()
        platform_locales.each do |locale|
          locale_code  = locale["locale"]
          local_name   = locale["name"]["local"]
          english_name = locale["name"]["eng"]

          if locale_code == platform_base_locale
            # we skip the base
            next
          else
            yaml = platform.translation.download_yaml(locale_code)
            YAML.load(yaml).each do |code, translations|
              I18n.backend.store_translations(locale_code, translations)
            end
          end
        end
      end
      
      # This will load the phrases defined for I18n's default locale.
      # If not a Rails project, manually supply the path where the I18n yml or rb files for located.
      def load_phrases(path=nil)
        backend = I18n.backend.is_a?(I18n::Backend::Chain) ? I18n.backend.backends.last : I18n.backend

        if defined?(Rails)
          backend.load_translations
        else
          raise ArgumentError, "Please supply the path where locales are located." unless path
          path = path.chop if path =~ /\/$/
          backend.load_translations(*Dir.glob("#{path}/**/*.{yml,rb}"))
        end

        @phrases_nested = backend.instance_variable_get("@translations")[I18n.default_locale]

        # Flatten the nested hash.
        flat_keys = flatten_translations(I18n.default_locale, @phrases_nested, true, false)

        # Remove those "supporting/generic" i18n entities that we're not sending to OneSky.
        # Those that are found in the rails-i18n github repository.
        # Eg. number, datetime, activemodel, etc.
        # Note: This doesn't handle FLATTEN_SEPARATOR other than '.' yet.
        patterns = %w{number datetime activemodel support activerecord date time errors helpers}.inject([]) { |o,e| o << Regexp.new("^#{e}(\\..*)?$") }
        @phrases_flat = flat_keys.reject { |k,v| patterns.find { |e| k.to_s =~ e } }
      end

      # Once you've loaded the default locale's phrases, call this method to send them to OneSky for translation.
      def upload_phrases
        load_phrases unless @phrases_flat

        array = []
        @phrases_flat.each do |key, value|
          # ToDo: Materialize ALL CLDR plural tags if at least one is present for a leaf node.
          array << {:string_key => key, :string => value}
        end

        @project.input_strings(array)
      end

      protected

      def verify_platform!
        # call the api for the platform
        # this'll raise if there's an authentication problem
        platform_details
      end

      def verify_default_locale!
        unless i18n_default_locale == platform_base_locale.downcase
          raise DefaultLocaleMismatchError, "I18n and OneSky have different default locale settings. #{I18n.default_locale} <> #{platform_base_locale}"
        end
      end

      def i18n_default_locale
        # Special case: i18n "en" is "en-us".
        I18n.default_locale == :en ? "en_us" : I18n.default_locale.to_s.downcase
      end
    end
  end
end

